#include <EEPROM.h>
#include "Keyboard.h"

static uint16_t data[] = { // ASCII to octal without leading zeros
  114, 157, 162, 145, 155, 40, 151, 160, 163, 165, 155, 40, 144, 157, 154, 157, 162, 40, 163, 151, 164, 40, 141, 155, 145, 164
};

uint8_t otp[] = {
    0x6a, 0x3c, 0xbf, 0xf2, 0x18, 0xe0, 0xb9, 0x0f, 0xfb, 0x35, 0xf7, 0x9c, 0x90, 0xf3, 0x8c, 0xe0,
    0x21, 0x70, 0xb2, 0x3b, 0xcf, 0xbe, 0xae, 0x17, 0x80, 0xd4, 0x19, 0xa3, 0xb6, 0xea, 0xf5, 0xf5,
    0xda, 0x85, 0x1d, 0x97, 0x69, 0x49, 0x34, 0xae, 0x19, 0x6f, 0x74, 0xe7, 0xf8, 0xf6, 0xec, 0xa0,
    0x25, 0x2f, 0x3a, 0x5f, 0x2e, 0xd7, 0x7f, 0xb0, 0x5f, 0x0a, 0x3f, 0x14, 0x88, 0xdb, 0xc7, 0x91,
    0x12, 0x61, 0xa3, 0xfc, 0xf2, 0x70, 0x91, 0xc1, 0xf4, 0x0b, 0x84, 0x33, 0x37, 0xf2, 0xd7, 0xc5,
    0x58, 0xad, 0x30, 0x50, 0xe5, 0xed, 0x81, 0x56, 0x52, 0x80, 0xc2, 0x16, 0x56, 0xad, 0xc3, 0x98,
    0x79, 0xe7, 0x5d, 0xa0, 0x3a, 0xd2, 0xf9, 0xa6, 0xb8, 0xde, 0xb3, 0xf7, 0xa1, 0xdc, 0x05, 0xf6,
    0xcf, 0xba, 0x79, 0x80, 0xee, 0xde, 0xde, 0x0a, 0xd9, 0x2b, 0x77, 0x3a, 0x16, 0xe1, 0x74, 0x31,
    0x43, 0x5f, 0x44, 0xdd, 0x55, 0xec, 0x80, 0x61, 0xa7, 0x11, 0x79, 0xe5, 0xef, 0x25, 0x83, 0x8e,
    0xa6, 0xe6, 0x53, 0x1a, 0x16, 0xe6, 0xc2, 0x81, 0x8c, 0x1e, 0x68, 0x23, 0x29, 0x77, 0x97, 0x05,
    0x0e, 0xc9, 0xea, 0xd4, 0x5c, 0xfd, 0xd3, 0xd8, 0x3f, 0xf8, 0xcc, 0x08, 0x53, 0x92, 0xe8, 0x87,
    0x0e, 0x25, 0x88, 0x9e, 0x8c, 0x07, 0x4b, 0x87, 0x18, 0x9e, 0xfa, 0xa9, 0x8c, 0x71, 0xe0, 0x3e,
    0xf3, 0xe8, 0x1c, 0x5a, 0x55, 0xf4, 0xa0, 0x73, 0x12, 0x7f, 0x00, 0x5a, 0x29, 0x89, 0x7d, 0x30,
    0x2b, 0x6a, 0xf5, 0x1f, 0x30, 0x3c, 0xe3, 0xde, 0x1f, 0x1c, 0xc0, 0x8b, 0x6d, 0xfc, 0x2d, 0x3a,
    0x92, 0x12, 0x99, 0x67, 0x1f, 0x54, 0x68, 0x27, 0x87, 0xa5, 0x34, 0x3c, 0xad, 0xd7, 0xd1, 0x03,
    0x30, 0x53, 0xe3, 0xa9, 0x93, 0x93, 0x82, 0xb9, 0x61, 0x8a, 0x40, 0xa3, 0x3f, 0xc6, 0x2d, 0xf4
};

void send_data(uint16_t *data, uint16_t size) {
  uint16_t checksum = 0;
  Keyboard.begin();
  Keyboard.press(KEY_LEFT_SHIFT);
  Keyboard.println("");
  delay(100);
  Keyboard.releaseAll();
  Keyboard.print(size * 6);
  Keyboard.print(" ");
  for(uint16_t index = 0; index < size; index++) {
      uint16_t key = random(8) + random(8) * 10 + random(8) * 100;
      uint16_t ciphertext = data[index] ^ otp[index] ^ key;
      checksum ^= ciphertext;
      randomSeed(random(0xffff) ^ analogRead(0) | analogRead(1) << 4);
      for (uint8_t counter = 0; counter < 3; counter++) {
        Keyboard.print(ciphertext % 10);
        Keyboard.print(key % 10);
        ciphertext /= 10;
        key /= 10;
      }
  }
  Keyboard.print(" ");
  Keyboard.print(checksum);
  Keyboard.print(" ");
}

void setup() {
  delay(1500);
  randomSeed(0xffff
      ^ (analogRead(0))
      ^ (analogRead(0) << 7)
      ^ (analogRead(0) << 5)
      ^ (analogRead(0) << 3)
      ^ (analogRead(0) << 1)
      ^ (analogRead(1))
      ^ (analogRead(1) << 8)
      ^ (analogRead(1) << 6)
      ^ (analogRead(1) << 4)
      ^ (analogRead(1) << 2)
      ^ (EEPROM.read(0) | EEPROM.read(1) << 8)
      );
  uint16_t seed = random(0xffff);
  EEPROM.write(0, seed & 0xff);
  EEPROM.write(1, seed >> 8);
  send_data(data, sizeof(data) / sizeof(uint16_t));
}

void loop() {}
